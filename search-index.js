var searchIndex = new Map(JSON.parse('[\
["cbqn",{"doc":"cbqn","t":"PQGFPPGPPPPPPPNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNHNNNNNNNNNNNNNNNNNNNNNNN","n":["Array","BQN","BQNType","BQNValue","CBQN","Character","Error","Function","InvalidType","Mod1","Mod2","Namespace","NotSupported","Number","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","bqn_type","call1","call2","clone","clone_into","drop","eq","eval","fmt","fmt","fmt","fmt","fn1","fn2","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_iter","from_iter","from_iter","from_iter","get_field","has_field","init","into","into","into","null","to_bqnvalue_vec","to_char","to_char_vec","to_f64","to_f64_vec","to_owned","to_string","to_string","to_u32","try_from","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id"],"q":[[0,"cbqn"],[94,"core::result"],[95,"core::fmt"],[96,"core::fmt"],[97,"alloc::string"],[98,"core::iter::traits::collect"],[99,"core::option"],[100,"core::any"]],"d":["","Convenience macro for running BQN expressions","BQN type enumeration","Represents a BQN value","","","","","","1-modifier","2-modifier","","","","","","","","","","Returns the BQN type of the BQNValue","Calls <code>BQNValue</code> as a function with one argument","Calls <code>BQNValue</code> as a function with two arguments","","","","","Evaluates BQN code","","","","","Generates a BQNValue from a Rust function","Generates a BQNValue from a Rust function","","","","","","","","","","","","","","Returns the argument unchanged.","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","Returns <code>field</code> from a BQN namespace as <code>BQNValue</code>. Returns …","Returns a boolean value indicating whether <code>field</code> exists in …","Initializes the CBQN interpreter","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Constructs a BQN null value <code>@</code>","Converts <code>BQNValue</code> into a vector of <code>BQNValue</code>s","Converts <code>BQNValue</code> into <code>char</code>","Converts <code>BQNValue</code> into vector of <code>char</code>s","Converts <code>BQNValue</code> into <code>f64</code>","Converts <code>BQNValue</code> into a vector of <code>f64</code>s","","Converts <code>BQNValue</code> into a <code>String</code>","","Converts <code>BQNValue</code> into <code>u32</code>","","","","","","","","","",""],"i":[2,0,0,0,3,2,0,2,3,2,2,2,3,2,1,3,2,1,3,2,1,1,1,1,1,1,2,0,1,3,3,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,2,1,1,1,1,1,1,1,0,1,3,2,1,1,1,1,1,1,1,1,3,1,1,3,2,2,1,3,2,1,3,2],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,0,[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[1,2],[[1,1],[[4,[1,3]]]],[[1,1,1],[[4,[1,3]]]],[1,1],[[-1,-2],5,[],[]],[1,5],[[2,2],6],[7,[[4,[1,3]]]],[[1,8],9],[[3,8],9],[[3,8],9],[[2,8],9],[[],1],[[],1],[[[11,[10]]],1],[[[12,[1]]],1],[[[14,[13]]],1],[[[12,[13]]],1],[15,1],[[[12,[16]]],1],[16,1],[[[14,[17]]],1],[[[14,[10]]],1],[[[14,[1]]],1],[[[12,[17]]],1],[[[14,[16]]],1],[[[11,[13]]],1],[-1,-1,[]],[[[12,[7]]],1],[[[14,[7]]],1],[[[14,[15]]],1],[[[11,[15]]],1],[[[12,[15]]],1],[[[12,[10]]],1],[18,1],[[[11,[16]]],1],[7,1],[[[14,[17]]],1],[17,1],[17,1],[[[11,[1]]],1],[-1,-1,[]],[-1,-1,[]],[-1,1,[[20,[],[[19,[16]]]]]],[-1,1,[[20,[],[[19,[15]]]]]],[-1,1,[[20,[],[[19,[10]]]]]],[-1,1,[[20,[],[[19,[1]]]]]],[-1,1,[[20,[],[[19,[13]]]]]],[[1,7],[[4,[[21,[1]],3]]]],[[1,7],[[4,[6,3]]]],[[],5],[-1,-2,[],[]],[-1,-2,[],[]],[-1,-2,[],[]],[[],1],[1,[[4,[[14,[1]],3]]]],[1,[[4,[[21,[18]],3]]]],[1,[[4,[[14,[18]],3]]]],[1,[[4,[15,3]]]],[1,[[4,[[14,[15]],3]]]],[-1,-2,[],[]],[1,[[4,[17,3]]]],[-1,17,[]],[1,[[4,[22,3]]]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[16,[[4,[2,-1]]],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,[[4,[-2]]],[],[]],[-1,23,[]],[-1,23,[]],[-1,23,[]]],"c":[],"p":[[5,"BQNValue",0],[6,"BQNType",0],[6,"Error",0],[6,"Result",94],[1,"tuple"],[1,"bool"],[1,"str"],[5,"Formatter",95],[8,"Result",95],[1,"i16"],[1,"slice"],[1,"array"],[1,"i8"],[5,"Vec",96],[1,"f64"],[1,"i32"],[5,"String",97],[1,"char"],[17,"Item"],[10,"IntoIterator",98],[6,"Option",99],[1,"u32"],[5,"TypeId",100]],"b":[[29,"impl-Debug-for-Error"],[30,"impl-Display-for-Error"],[34,"impl-From%3C%26%5Bi16%5D%3E-for-BQNValue"],[35,"impl-From%3C%5BBQNValue;+N%5D%3E-for-BQNValue"],[36,"impl-From%3CVec%3Ci8%3E%3E-for-BQNValue"],[37,"impl-From%3C%5Bi8;+N%5D%3E-for-BQNValue"],[38,"impl-From%3Cf64%3E-for-BQNValue"],[39,"impl-From%3C%5Bi32;+N%5D%3E-for-BQNValue"],[40,"impl-From%3Ci32%3E-for-BQNValue"],[41,"impl-From%3CVec%3C%26String%3E%3E-for-BQNValue"],[42,"impl-From%3CVec%3Ci16%3E%3E-for-BQNValue"],[43,"impl-From%3CVec%3CBQNValue%3E%3E-for-BQNValue"],[44,"impl-From%3C%5BString;+N%5D%3E-for-BQNValue"],[45,"impl-From%3CVec%3Ci32%3E%3E-for-BQNValue"],[46,"impl-From%3C%26%5Bi8%5D%3E-for-BQNValue"],[48,"impl-From%3C%5B%26str;+N%5D%3E-for-BQNValue"],[49,"impl-From%3CVec%3C%26str%3E%3E-for-BQNValue"],[50,"impl-From%3CVec%3Cf64%3E%3E-for-BQNValue"],[51,"impl-From%3C%26%5Bf64%5D%3E-for-BQNValue"],[52,"impl-From%3C%5Bf64;+N%5D%3E-for-BQNValue"],[53,"impl-From%3C%5Bi16;+N%5D%3E-for-BQNValue"],[54,"impl-From%3Cchar%3E-for-BQNValue"],[55,"impl-From%3C%26%5Bi32%5D%3E-for-BQNValue"],[56,"impl-From%3C%26str%3E-for-BQNValue"],[57,"impl-From%3CVec%3CString%3E%3E-for-BQNValue"],[58,"impl-From%3CString%3E-for-BQNValue"],[59,"impl-From%3C%26String%3E-for-BQNValue"],[60,"impl-From%3C%26%5BBQNValue%5D%3E-for-BQNValue"],[63,"impl-FromIterator%3Ci32%3E-for-BQNValue"],[64,"impl-FromIterator%3Cf64%3E-for-BQNValue"],[65,"impl-FromIterator%3Ci16%3E-for-BQNValue"],[66,"impl-FromIterator%3CBQNValue%3E-for-BQNValue"],[67,"impl-FromIterator%3Ci8%3E-for-BQNValue"]]}]\
]'));
if (typeof exports !== 'undefined') exports.searchIndex = searchIndex;
else if (window.initSearch) window.initSearch(searchIndex);
